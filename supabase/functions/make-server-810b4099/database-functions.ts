import { createClient } from 'npm:@supabase/supabase-js@2';

// Fonctions utilitaires pour la gestion de la base de donn√©es

export const createSupabaseAdmin = () => {
  return createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
    {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    }
  );
};

// Fonction pour ex√©cuter les fonctions SQL d'initialisation
export const executeDatabaseFunctions = async (supabase: any): Promise<{ success: boolean; results: string[]; errors: string[] }> => {
  const results: string[] = [];
  const errors: string[] = [];

  try {
    console.log('üèóÔ∏è Ex√©cution des fonctions de cr√©ation de tables...');

    // Liste des fonctions SQL √† ex√©cuter
    const functions = [
      'create_user_profiles_table',
      'create_subscriptions_table', 
      'create_transactions_table',
      'create_alerts_table',
      'create_settings_table',
      'create_alert_rules_table',
      'create_email_templates_table',
      'create_ai_usage_logs_table',
      'create_updated_at_triggers'
    ];

    for (const functionName of functions) {
      try {
        console.log(`üìã Ex√©cution de ${functionName}...`);
        
        const { data, error } = await supabase.rpc(functionName);
        
        if (error) {
          console.error(`‚ùå Erreur ${functionName}:`, error.message);
          errors.push(`${functionName}: ${error.message}`);
        } else {
          console.log(`‚úÖ ${functionName} r√©ussie:`, data);
          results.push(`${functionName}: ${data || 'Succ√®s'}`);
        }
      } catch (funcError) {
        console.error(`‚ùå Exception ${functionName}:`, funcError);
        errors.push(`${functionName}: ${funcError.message}`);
      }
    }

    return {
      success: errors.length === 0,
      results,
      errors
    };

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale ex√©cution fonctions:', error);
    return {
      success: false,
      results,
      errors: [...errors, `Erreur g√©n√©rale: ${error.message}`]
    };
  }
};

// Fonction pour initialiser les param√®tres syst√®me
export const initializeSystemSettings = async (supabase: any): Promise<{ success: boolean; message: string }> => {
  try {
    console.log('‚öôÔ∏è Initialisation des param√®tres syst√®me...');

    const settings = [
      // Param√®tres d'essai gratuit
      { key: 'trial_duration_days', value: '7', description: 'Dur√©e essai gratuit en jours' },
      { key: 'trial_tokens_amount', value: '100000', description: 'Jetons pour essai gratuit' },
      { key: 'trial_tokens', value: '100000', description: 'Jetons pour essai gratuit (nouvelle cl√©)' },
      { key: 'trial_enabled', value: 'true', description: 'Activation de l\'essai gratuit' },

      // Param√®tres de tarification
      { key: 'monthly_subscription_price', value: '4000', description: 'Prix abonnement mensuel DA HT' },
      { key: 'tokens_pack_1m_price', value: '1000', description: 'Prix pack 1M jetons DA HT' },
      { key: 'pricing_subscription_monthly_price', value: '4000', description: 'Prix abonnement mensuel (DA HT)' },
      { key: 'pricing_subscription_monthly_tokens', value: '1000000', description: 'Jetons inclus par mois' },
      { key: 'pricing_subscription_currency', value: 'DA', description: 'Devise abonnement' },
      { key: 'pricing_tokens_price_per_million', value: '1000', description: 'Prix du million de jetons (DA HT)' },
      { key: 'pricing_tokens_currency', value: 'DA', description: 'Devise pour l\'achat de jetons' },
      {
        key: 'pricing_discounts',
        value: JSON.stringify([
          { threshold: 6, percentage: 7 },
          { threshold: 12, percentage: 20 },
          { threshold: 10000000, percentage: 10 },
          { threshold: 20000000, percentage: 20 }
        ]),
        description: 'Paliers de remise (dur√©e en mois / quantit√© de jetons)'
      },
      { key: 'pricing_vat_enabled', value: 'true', description: 'TVA activ√©e' },
      { key: 'pricing_vat_rate', value: '20', description: 'Taux de TVA en pourcentage' },

      // Param√®tres d'alertes Pro
      { key: 'alert_pro_subscription_20d', value: 'true', description: 'Alerte abonnement Pro 20 jours' },
      { key: 'alert_pro_subscription_7d', value: 'true', description: 'Alerte abonnement Pro 7 jours' },
      { key: 'alert_pro_subscription_2d', value: 'true', description: 'Alerte abonnement Pro 2 jours' },
      { key: 'alert_pro_subscription_0d', value: 'true', description: 'Alerte abonnement Pro jour J' },
      
      // Param√®tres d'alertes jetons Pro
      { key: 'alert_pro_tokens_100k', value: 'true', description: 'Alerte tokens Pro 100k' },
      { key: 'alert_pro_tokens_50k', value: 'true', description: 'Alerte tokens Pro 50k' },
      { key: 'alert_pro_tokens_10k', value: 'true', description: 'Alerte tokens Pro 10k' },
      { key: 'alert_pro_tokens_0', value: 'true', description: 'Alerte tokens Pro 0' },
      
      // Param√®tres d'alertes Premium
      { key: 'alert_premium_subscription_5d', value: 'true', description: 'Alerte essai gratuit 5 jours' },
      { key: 'alert_premium_subscription_3d', value: 'true', description: 'Alerte essai gratuit 3 jours' },
      { key: 'alert_premium_subscription_2d', value: 'true', description: 'Alerte essai gratuit 2 jours' },
      { key: 'alert_premium_subscription_0d', value: 'true', description: 'Alerte essai gratuit dernier jour' },
      
      // Param√®tres d'alertes jetons Premium
      { key: 'alert_premium_tokens_50k', value: 'true', description: 'Alerte tokens Premium 50k' },
      { key: 'alert_premium_tokens_25k', value: 'true', description: 'Alerte tokens Premium 25k' },
      { key: 'alert_premium_tokens_10k', value: 'true', description: 'Alerte tokens Premium 10k' },
      { key: 'alert_premium_tokens_0', value: 'true', description: 'Alerte tokens Premium 0' },
      
      // Param√®tres g√©n√©raux
      { key: 'app_version', value: '1.0.0', description: 'Version de l\'application' },
      { key: 'support_email', value: 'support@misan.dz', description: 'Email de support' },
      { key: 'company_name', value: 'Misan Technologies', description: 'Nom de l\'entreprise' },
      { key: 'maintenance_mode', value: 'false', description: 'Mode maintenance' }
    ];

    let successCount = 0;
    let errorCount = 0;

    for (const setting of settings) {
      try {
        const { error } = await supabase
          .from('system_settings')
          .upsert({
            key: setting.key,
            value: setting.value,
            description: setting.description
          });

        if (error) {
          console.error(`‚ùå Erreur param√®tre ${setting.key}:`, error.message);
          errorCount++;
        } else {
          console.log(`‚úÖ Param√®tre configur√©: ${setting.key}`);
          successCount++;
        }
      } catch (settingError) {
        console.error(`‚ùå Exception param√®tre ${setting.key}:`, settingError);
        errorCount++;
      }
    }

    console.log(`üìä Param√®tres: ${successCount} r√©ussis, ${errorCount} erreurs`);

    return {
      success: errorCount === 0,
      message: `Param√®tres syst√®me initialis√©s: ${successCount} r√©ussis, ${errorCount} erreurs`
    };

  } catch (error) {
    console.error('‚ùå Erreur initialisation param√®tres:', error);
    return {
      success: false,
      message: `Erreur initialisation param√®tres: ${error.message}`
    };
  }
};

export const initializeAlertRules = async (supabase: any): Promise<{ success: boolean; message: string }> => {
  try {
    console.log('üîî Initialisation des r√®gles d\'alertes...');

    const defaultRules = [
      {
        name: 'Abonnement Pro - 20 jours',
        description: 'Alerte lorsque la fin d\'abonnement pro approche (20 jours).',
        trigger_type: 'scheduled',
        target: 'subscription',
        comparator: '=',
        threshold: 20,
        severity: 'info',
        message_template: 'Votre abonnement Pro expire dans {{days}} jours.',
        applies_to_role: 'pro',
        is_blocking: false,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Abonnement Pro - 7 jours',
        description: 'Alerte lorsque la fin d\'abonnement pro approche (7 jours).',
        trigger_type: 'scheduled',
        target: 'subscription',
        comparator: '=',
        threshold: 7,
        severity: 'warning',
        message_template: 'Votre abonnement Pro expire dans {{days}} jours.',
        applies_to_role: 'pro',
        is_blocking: false,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Abonnement Pro - 2 jours',
        description: 'Alerte lorsque la fin d\'abonnement pro approche (2 jours).',
        trigger_type: 'scheduled',
        target: 'subscription',
        comparator: '=',
        threshold: 2,
        severity: 'error',
        message_template: 'Votre abonnement Pro expire dans {{days}} jours !',
        applies_to_role: 'pro',
        is_blocking: true,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Abonnement Premium - 5 jours',
        description: 'Alerte lorsque la fin de l\'essai premium approche (5 jours).',
        trigger_type: 'scheduled',
        target: 'subscription',
        comparator: '=',
        threshold: 5,
        severity: 'info',
        message_template: 'Votre essai gratuit se termine dans {{days}} jours.',
        applies_to_role: 'premium',
        is_blocking: false,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Abonnement Premium - 3 jours',
        description: 'Alerte lorsque la fin de l\'essai premium approche (3 jours).',
        trigger_type: 'scheduled',
        target: 'subscription',
        comparator: '=',
        threshold: 3,
        severity: 'warning',
        message_template: 'Votre essai gratuit se termine dans {{days}} jours.',
        applies_to_role: 'premium',
        is_blocking: false,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Abonnement Premium - 2 jours',
        description: 'Alerte lorsque la fin de l\'essai premium approche (2 jours).',
        trigger_type: 'scheduled',
        target: 'subscription',
        comparator: '=',
        threshold: 2,
        severity: 'warning',
        message_template: 'Votre essai gratuit se termine dans {{days}} jours.',
        applies_to_role: 'premium',
        is_blocking: false,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Abonnement Premium - 0 jour',
        description: 'Alerte lorsque l\'essai premium se termine.',
        trigger_type: 'scheduled',
        target: 'subscription',
        comparator: '=',
        threshold: 0,
        severity: 'error',
        message_template: 'Votre essai gratuit a expir√©. Passez √† un abonnement Pro.',
        applies_to_role: 'premium',
        is_blocking: true,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Jetons Pro - 100k',
        description: 'Alerte lorsque le solde de jetons Pro passe sous 100 000.',
        trigger_type: 'scheduled',
        target: 'tokens',
        comparator: '<=',
        threshold: 100000,
        severity: 'info',
        message_template: 'Il vous reste {{tokens}} jetons.',
        applies_to_role: 'pro',
        is_blocking: false,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Jetons Pro - 50k',
        description: 'Alerte lorsque le solde de jetons Pro passe sous 50 000.',
        trigger_type: 'scheduled',
        target: 'tokens',
        comparator: '<=',
        threshold: 50000,
        severity: 'warning',
        message_template: 'Il vous reste {{tokens}} jetons. Pensez √† recharger.',
        applies_to_role: 'pro',
        is_blocking: false,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Jetons Pro - 0',
        description: 'Alerte lorsque le solde de jetons Pro est √©puis√©.',
        trigger_type: 'scheduled',
        target: 'tokens',
        comparator: '<=',
        threshold: 0,
        severity: 'error',
        message_template: 'Votre solde de jetons est √©puis√©.',
        applies_to_role: 'pro',
        is_blocking: true,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Jetons Premium - 50k',
        description: 'Alerte lorsque le solde de jetons Premium passe sous 50 000.',
        trigger_type: 'scheduled',
        target: 'tokens',
        comparator: '<=',
        threshold: 50000,
        severity: 'info',
        message_template: 'Il vous reste {{tokens}} jetons d\'essai.',
        applies_to_role: 'premium',
        is_blocking: false,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Jetons Premium - 25k',
        description: 'Alerte lorsque le solde de jetons Premium passe sous 25 000.',
        trigger_type: 'scheduled',
        target: 'tokens',
        comparator: '<=',
        threshold: 25000,
        severity: 'warning',
        message_template: 'Il vous reste {{tokens}} jetons d\'essai. Pensez √† recharger.',
        applies_to_role: 'premium',
        is_blocking: false,
        is_active: true,
        metadata: {}
      },
      {
        name: 'Jetons Premium - 0',
        description: 'Alerte lorsque le solde de jetons Premium est √©puis√©.',
        trigger_type: 'scheduled',
        target: 'tokens',
        comparator: '<=',
        threshold: 0,
        severity: 'error',
        message_template: 'Votre solde de jetons d\'essai est √©puis√©.',
        applies_to_role: 'premium',
        is_blocking: true,
        is_active: true,
        metadata: {}
      }
    ];

    const { error } = await supabase
      .from('alert_rules')
      .upsert(defaultRules, { onConflict: 'name' });

    if (error) {
      console.error('‚ùå Erreur initialisation alert rules:', error.message);
      return {
        success: false,
        message: error.message
      };
    }

    return {
      success: true,
      message: 'R√®gles d\'alertes initialis√©es'
    };
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale initialisation alert rules:', error);
    return {
      success: false,
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    };
  }
};

export const initializeEmailTemplates = async (supabase: any): Promise<{ success: boolean; message: string }> => {
  try {
    console.log('‚úâÔ∏è Initialisation des templates emails...');

    const defaultTemplates = [
      {
        name: 'Inscription',
        subject: 'Bienvenue sur Moualimy',
        recipients: 'both',
        cc: [] as string[],
        bcc: [] as string[],
        body: 'Bonjour {{user_name}},\n\nMerci pour votre inscription sur Moualimy. Nous avons bien re√ßu vos informations ({{user_email}}) et notre √©quipe validera votre acc√®s dans les plus brefs d√©lais.\n\nVous recevrez un email de confirmation d√®s que votre compte sera activ√©. En attendant, vous pouvez consulter nos offres depuis la page tarifs.\n\n√Ä tr√®s vite !',
        signature: 'L\'√©quipe Moualimy\nVous accompagne dans votre r√©ussite',
        is_active: true,
        metadata: {}
      },
      {
        name: 'Confirmation inscription',
        subject: 'Votre compte Moualimy est valid√©',
        recipients: 'user',
        cc: [] as string[],
        bcc: [] as string[],
        body: 'Bonjour {{user_name}},\n\nVotre inscription vient d\'√™tre valid√©e par notre √©quipe.\n\nVous disposez maintenant d\'un acc√®s complet √† la plateforme.\n\nBonne utilisation !',
        signature: 'L\'√©quipe Moualimy\nVous accompagne dans votre r√©ussite',
        is_active: true,
        metadata: {}
      },
      {
        name: 'Confirmation achat',
        subject: 'Nous avons bien re√ßu votre commande',
        recipients: 'user',
        cc: [] as string[],
        bcc: [] as string[],
        body: 'Bonjour {{user_name}},\n\nVotre commande a bien √©t√© enregistr√©e.\n\nPour finaliser le paiement par virement, merci de suivre les instructions indiqu√©es dans votre espace client.\n\nNous vous confirmerons la r√©ception du r√®glement dans les plus brefs d√©lais.',
        signature: 'L\'√©quipe Moualimy\nVous accompagne dans votre r√©ussite',
        is_active: true,
        metadata: {}
      },
      {
        name: 'Confirmation paiement en ligne',
        subject: 'Paiement confirm√©',
        recipients: 'user',
        cc: [] as string[],
        bcc: [] as string[],
        body: 'Bonjour {{user_name}},\n\nNous confirmons la r√©ception de votre paiement.\n\nVotre abonnement ou votre pack de jetons est d√©sormais actif.\n\nMerci de votre confiance !',
        signature: 'L\'√©quipe Moualimy\nVous accompagne dans votre r√©ussite',
        is_active: true,
        metadata: {}
      },
      {
        name: 'R√©ception virement',
        subject: 'Nous avons re√ßu votre virement',
        recipients: 'user',
        cc: [] as string[],
        bcc: [] as string[],
        body: 'Bonjour {{user_name}},\n\nNous vous informons que votre virement a bien √©t√© r√©ceptionn√©.\n\nVotre acc√®s est maintenant pleinement actif.\n\nMerci pour votre paiement.',
        signature: 'L\'√©quipe Moualimy\nVous accompagne dans votre r√©ussite',
        is_active: true,
        metadata: {}
      },
      {
        name: 'Avertissement suspension',
        subject: 'Important : votre compte Moualimy',
        recipients: 'user',
        cc: [] as string[],
        bcc: ['admin@moualimy.com'],
        body: 'Bonjour {{user_name}},\n\nNous constatons que votre compte pr√©sente un incident.\n\nMerci de r√©gulariser votre situation afin d\'√©viter la suspension ou la suppression de votre acc√®s.\n\nContactez-nous si vous avez besoin d\'assistance.',
        signature: 'L\'√©quipe Moualimy\nVous accompagne dans votre r√©ussite',
        is_active: true,
        metadata: {}
      },
      {
        name: 'Confirmation suppression compte',
        subject: 'Confirmation de suppression de votre compte Moualimy',
        recipients: 'user',
        cc: [] as string[],
        bcc: [] as string[],
        body: 'Bonjour {{user_name}},\n\nNous vous confirmons que votre compte Moualimy a √©t√© supprim√© et que vous n\'avez plus acc√®s √† la plateforme.\n\nSi vous pensez qu\'il s\'agit d\'une erreur ou souhaitez rouvrir un compte, contactez-nous √† {{support_email}}.\n\nMerci d\'avoir utilis√© nos services.',
        signature: 'L\'√©quipe Moualimy\nVous accompagne dans votre r√©ussite',
        is_active: true,
        metadata: {}
      },
      {
        name: 'Relance paiement',
        subject: 'Relance : paiement en attente',
        recipients: 'user',
        cc: [] as string[],
        bcc: ['admin@moualimy.com'],
        body: 'Bonjour {{user_name}},\n\nNous revenons vers vous concernant le paiement de votre commande toujours en attente.\n\nSans r√®glement sous 48h, nous serons contraints de suspendre l\'acc√®s au service.\n\nMerci de votre rapidit√©.',
        signature: 'L\'√©quipe Moualimy\nVous accompagne dans votre r√©ussite',
        is_active: true,
        metadata: {}
      },
      {
        name: 'mod√®le-de-sortie-email',
        subject: 'Mod√®le d\'email Moualimy',
        recipients: 'user',
        cc: [] as string[],
        bcc: [] as string[],
        body: `<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{{subject}}</title>
  <style>
    :root { color-scheme: light; }
    body {
      margin: 0;
      padding: 0;
      background-color: #f4f6fb;
      font-family: 'Inter', 'Segoe UI', Arial, sans-serif;
      color: #0f172a;
    }
    a {
      color: #2563eb;
    }
  </style>
</head>
<body style="margin:0; padding:0; background-color:#f4f6fb;">
  <table role="presentation" width="100%" cellpadding="0" cellspacing="0" style="background-color:#f4f6fb; padding:32px 0;">
    <tr>
      <td align="center">
        <table role="presentation" width="600" cellpadding="0" cellspacing="0" style="width:100%; max-width:600px; background-color:#ffffff; border-radius:16px; overflow:hidden; box-shadow:0 8px 24px rgba(15,23,42,0.08);">
          <tr>
            <td style="padding:28px 32px; background:linear-gradient(135deg, #1e3a8a, #2563eb); color:#f8fafc;">
              <span style="text-transform:uppercase; letter-spacing:0.08em; font-size:12px; color:#c7d2fe;">Moualimy</span>
              <h1 style="margin:12px 0 0; font-size:26px; line-height:1.2; font-weight:600; color:#f8fafc;">{{headline}}</h1>
            </td>
          </tr>
          <tr>
            <td style="padding:32px;">
              <p style="margin:0 0 16px; font-size:16px; line-height:1.6;">Bonjour {{user_name}},</p>
              <p style="margin:0 0 16px; font-size:15px; line-height:1.6; color:#475569;">{{intro}}</p>
              <p style="margin:0 0 24px; font-size:15px; line-height:1.6; color:#1f2937;">{{body_text}}</p>
              <table role="presentation" cellpadding="0" cellspacing="0" style="margin:0 0 32px;">
                <tr>
                  <td style="background-color:#2563eb; border-radius:999px;">
                    <a href="{{cta_url}}" style="display:inline-block; padding:14px 32px; font-size:15px; font-weight:600; color:#ffffff; text-decoration:none;">{{cta_label}}</a>
                  </td>
                </tr>
              </table>
              <table role="presentation" cellpadding="0" cellspacing="0" style="width:100%; margin:0 0 24px;">
                <tr>
                  <td style="padding:18px 20px; border:1px solid #e2e8f0; border-radius:12px; background-color:#f8fafc;">
                    <p style="margin:0; font-size:14px; font-weight:600; color:#0f172a;">Points cl√©s</p>
                    <p style="margin:8px 0 0; font-size:14px; line-height:1.6; color:#475569;">{{summary}}</p>
                  </td>
                </tr>
              </table>
              <p style="margin:0 0 16px; font-size:14px; line-height:1.6; color:#64748b;">Besoin d'assistance ? Contactez-nous sur <a href="mailto:support@moualimy.com" style="color:#2563eb; text-decoration:none;">support@moualimy.com</a>.</p>
              <p style="margin:0; font-size:14px; line-height:1.6; color:#0f172a;">Bien cordialement,<br />{{signature}}</p>
            </td>
          </tr>
          <tr>
            <td style="background-color:#0f172a; padding:24px 32px; text-align:center; color:#cbd5f5;">
              <p style="margin:0 0 8px; font-size:12px; letter-spacing:0.06em; text-transform:uppercase;">Moualimy</p>
              <p style="margin:0; font-size:12px; line-height:1.6;">{{footer_links}}</p>
            </td>
          </tr>
        </table>
        <p style="margin:24px 0 0; font-size:11px; color:#94a3b8;">Vous recevez cet email car votre adresse est enregistr√©e sur Moualimy.</p>
      </td>
    </tr>
  </table>
</body>
</html>`,
        signature: 'L\'√©quipe Moualimy\nVous accompagne dans votre r√©ussite',
        is_active: true,
        metadata: {
          category: 'layout',
          description: 'Template HTML stylis√© servant de base √† dupliquer pour les communications Moualimy',
          placeholders: ['headline', 'intro', 'body_text', 'cta_label', 'cta_url', 'summary', 'footer_links', 'signature']
        }
      }
    ];

    for (const template of defaultTemplates) {
      await supabase
        .from('email_templates')
        .upsert(template, { onConflict: 'name' });
    }

    return {
      success: true,
      message: 'Templates emails initialis√©s'
    };
  } catch (error) {
    console.error('‚ùå Erreur initialisation templates email:', error);
    return {
      success: false,
      message: error instanceof Error ? error.message : 'Erreur inconnue'
    };
  }
};

// Fonction pour v√©rifier l'√©tat de la base de donn√©es
export const checkDatabaseStatus = async (supabase: any): Promise<{
  tablesExist: boolean;
  userCount: number;
  adminExists: boolean;
  settingsCount: number;
  details: string[];
}> => {
  const details: string[] = [];
  let tablesExist = false;
  let userCount = 0;
  let adminExists = false;
  let settingsCount = 0;

  try {
    // V√©rifier la table user_profiles
    const { data: profiles, error: profilesError } = await supabase
      .from('user_profiles')
      .select('id, email, role')
      .limit(10);

    if (!profilesError) {
      tablesExist = true;
      userCount = profiles?.length || 0;
      adminExists = profiles?.some((p: any) => p.role === 'admin') || false;
      details.push(`‚úÖ Table user_profiles: ${userCount} utilisateur(s)`);
      details.push(`üëë Admin existe: ${adminExists ? 'Oui' : 'Non'}`);
    } else {
      details.push(`‚ùå Table user_profiles: ${profilesError.message}`);
    }

    // V√©rifier la table system_settings
    const { data: settings, error: settingsError } = await supabase
      .from('system_settings')
      .select('key')
      .limit(50);

    if (!settingsError) {
      settingsCount = settings?.length || 0;
      details.push(`‚úÖ Table system_settings: ${settingsCount} param√®tre(s)`);
    } else {
      details.push(`‚ùå Table system_settings: ${settingsError.message}`);
    }

    // V√©rifier les autres tables
    const tablesToCheck = ['subscriptions', 'transactions', 'user_alerts', 'ai_usage_logs'];
    
    for (const tableName of tablesToCheck) {
      const { data, error } = await supabase
        .from(tableName)
        .select('id')
        .limit(1);

      if (!error) {
        details.push(`‚úÖ Table ${tableName}: Accessible`);
      } else {
        details.push(`‚ùå Table ${tableName}: ${error.message}`);
      }
    }

  } catch (error) {
    details.push(`‚ùå Erreur v√©rification: ${error.message}`);
  }

  return {
    tablesExist,
    userCount,
    adminExists,
    settingsCount,
    details
  };
};

// Fonction pour cr√©er un utilisateur avec essai gratuit
export const createUserWithFreeTrial = async (
  supabase: any,
  email: string,
  password: string,
  name: string
): Promise<{ success: boolean; user?: any; error?: string }> => {
  try {
    console.log('üë§ Cr√©ation utilisateur avec essai gratuit:', email);

    // Cr√©er l'utilisateur Auth
    const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
      email,
      password,
      user_metadata: { name },
      email_confirm: true
    });

    if (authError || !authUser.user) {
      throw new Error(`Erreur Auth: ${authError?.message}`);
    }

    // Calculer la date de fin d'essai
    const trialEndDate = new Date();
    trialEndDate.setDate(trialEndDate.getDate() + 7);

    // Cr√©er le profil utilisateur
    const { error: profileError } = await supabase
      .from('user_profiles')
      .insert({
        id: authUser.user.id,
        email,
        name,
        role: 'premium',
        subscription_type: 'premium',
        subscription_status: 'active',
        subscription_end: trialEndDate.toISOString(),
        tokens_balance: 100000,
        trial_used: true
      });

    if (profileError) {
      // Supprimer l'utilisateur Auth en cas d'erreur
      await supabase.auth.admin.deleteUser(authUser.user.id);
      throw new Error(`Erreur profil: ${profileError.message}`);
    }

    console.log('‚úÖ Utilisateur cr√©√© avec essai gratuit');

    return {
      success: true,
      user: {
        id: authUser.user.id,
        email,
        name,
        role: 'premium',
        subscription_type: 'premium',
        subscription_status: 'active',
        subscription_end: trialEndDate.toISOString(),
        tokens_balance: 100000,
        trial_used: true
      }
    };

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation utilisateur:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Fonction pour cr√©er l'utilisateur admin
export const createAdminUser = async (supabase: any): Promise<{ success: boolean; user?: any; error?: string }> => {
  try {
    console.log('üëë Cr√©ation utilisateur admin...');

    // Cr√©er l'utilisateur Auth admin
    const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
      email: 'a@a.a',
      password: 'admin',
      user_metadata: {
        name: 'Administrateur Misan',
        role: 'admin'
      },
      email_confirm: true
    });

    if (authError || !authUser.user) {
      throw new Error(`Erreur Auth admin: ${authError?.message}`);
    }

    // Cr√©er le profil admin
    const { error: profileError } = await supabase
      .from('user_profiles')
      .insert({
        id: authUser.user.id,
        email: 'a@a.a',
        name: 'Administrateur Misan',
        role: 'admin',
        subscription_type: 'admin',
        subscription_status: 'active',
        subscription_end: '2030-12-31T23:59:59Z',
        tokens_balance: 999999999,
        trial_used: false
      });

    if (profileError) {
      // Supprimer l'utilisateur Auth en cas d'erreur
      await supabase.auth.admin.deleteUser(authUser.user.id);
      throw new Error(`Erreur profil admin: ${profileError.message}`);
    }

    console.log('‚úÖ Utilisateur admin cr√©√©');

    return {
      success: true,
      user: {
        id: authUser.user.id,
        email: 'a@a.a',
        name: 'Administrateur Misan',
        role: 'admin',
        subscription_type: 'admin',
        subscription_status: 'active',
        subscription_end: '2030-12-31T23:59:59Z',
        tokens_balance: 999999999,
        trial_used: false
      }
    };

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation admin:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Fonction pour v√©rifier et mettre √† jour les abonnements expir√©s
export const checkExpiredSubscriptions = async (supabase: any): Promise<{ success: boolean; updated: number; message: string }> => {
  try {
    console.log('üîç V√©rification des abonnements expir√©s...');

    const { data, error } = await supabase.rpc('check_and_update_expired_subscriptions');

    if (error) {
      throw new Error(`Erreur v√©rification: ${error.message}`);
    }

    console.log('‚úÖ V√©rification termin√©e:', data);

    return {
      success: true,
      updated: 0, // Le nombre sera dans le message retourn√© par la fonction
      message: data || 'V√©rification termin√©e'
    };

  } catch (error) {
    console.error('‚ùå Erreur v√©rification abonnements:', error);
    return {
      success: false,
      updated: 0,
      message: `Erreur: ${error.message}`
    };
  }
};

// Fonction pour g√©n√©rer les alertes automatiques
export const generateAutomaticAlerts = async (supabase: any): Promise<{ success: boolean; generated: number; message: string }> => {
  try {
    console.log('üîî G√©n√©ration des alertes automatiques...');

    const { data, error } = await supabase.rpc('generate_automatic_alerts');

    if (error) {
      throw new Error(`Erreur g√©n√©ration alertes: ${error.message}`);
    }

    console.log('‚úÖ Alertes g√©n√©r√©es:', data);

    return {
      success: true,
      generated: 0, // Le nombre sera dans le message retourn√© par la fonction
      message: data || 'Alertes g√©n√©r√©es'
    };

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration alertes:', error);
    return {
      success: false,
      generated: 0,
      message: `Erreur: ${error.message}`
    };
  }
};

// Fonction pour nettoyer les donn√©es expir√©es
export const cleanupExpiredData = async (supabase: any): Promise<{ success: boolean; message: string }> => {
  try {
    console.log('üßπ Nettoyage des donn√©es expir√©es...');

    // Supprimer les alertes expir√©es
    const { error: alertsError } = await supabase
      .from('user_alerts')
      .delete()
      .lt('expires_at', new Date().toISOString());

    if (alertsError) {
      console.error('‚ö†Ô∏è Erreur nettoyage alertes:', alertsError.message);
    } else {
      console.log('‚úÖ Alertes expir√©es supprim√©es');
    }

    // Supprimer les logs d'utilisation IA anciens (plus de 90 jours)
    const ninetyDaysAgo = new Date();
    ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);

    const { error: logsError } = await supabase
      .from('ai_usage_logs')
      .delete()
      .lt('created_at', ninetyDaysAgo.toISOString());

    if (logsError) {
      console.error('‚ö†Ô∏è Erreur nettoyage logs:', logsError.message);
    } else {
      console.log('‚úÖ Logs anciens supprim√©s');
    }

    return {
      success: true,
      message: 'Nettoyage des donn√©es expir√©es termin√©'
    };

  } catch (error) {
    console.error('‚ùå Erreur nettoyage:', error);
    return {
      success: false,
      message: `Erreur nettoyage: ${error.message}`
    };
  }
};
